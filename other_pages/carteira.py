import pandas as pd
import numpy as np
import locale
import os
locale.setlocale(locale.LC_ALL, 'pt_BR.UTF-8')
from modules.conf import brazil_vlr, subtractM, decimais_vlr, brazil_per, decimais_per, subtractB
import streamlit as st



## Tabela e Texto: Distribui√ß√£o da Carteira Ativa de acordo com a fase de andamento dos projetos 
def carteira_ativa_tab(filtered_df, distinct_df):
    # Combinar as fases em 'Em Negocia√ß√£o'
    def ajustar_fases(fase):
        if fase in ['Aguardando negocia√ß√£o', 'Negocia√ß√£o agendada', 'Em negocia√ß√£o']:
            return 'Em Negocia√ß√£o'
        return fase

    # Ajustar as fases nos DataFrames
    filtered_df.loc[:, 'deFase'] = filtered_df['deFase'].apply(ajustar_fases)
    # distinct_df.loc[:, 'deFase'] = distinct_df['deFase'].apply(ajustar_fases)

    # Continuar com o c√°lculo
    carteira_tab = pd.DataFrame({
        'N√∫mero de Opera√ß√µes': filtered_df.groupby('deFase')['cdCartaConsulta'].count(), # N√£o usar distinct
        'Valor de Empr√©stimo': filtered_df.groupby('deFase')['VlDolar'].sum(),
        'Valor de Contrapartida': filtered_df.groupby('deFase')['CpVlDolar'].sum()
    }).reindex(
        ['Aprovada COFIEX', 'Em prepara√ß√£o', 'Em Negocia√ß√£o', 'Aguardando Assinatura', 'Em execu√ß√£o'],
        fill_value=0
    )

    carteira_tab.fillna(0, inplace=True)

    # Remover as fases com valor zero em 'Valor de Empr√©stimo'
    carteira_tab = carteira_tab[carteira_tab['Valor de Empr√©stimo'] > 0]

    # Aplicar o c√°lculo do percentual formatado
    carteira_tab['Empr√©stimo / Total (%)'] = (
        carteira_tab['Valor de Empr√©stimo'] / carteira_tab['Valor de Empr√©stimo'].sum()
    )

    # Adicionar linha com a soma dos valores
    sum_row = pd.DataFrame({
        'N√∫mero de Opera√ß√µes': [carteira_tab['N√∫mero de Opera√ß√µes'].sum()],
        'Valor de Empr√©stimo': [carteira_tab['Valor de Empr√©stimo'].sum()],
        'Valor de Contrapartida': [carteira_tab['Valor de Contrapartida'].sum()],
        'Empr√©stimo / Total (%)': [carteira_tab['Empr√©stimo / Total (%)'].sum()]
    }, index=['Total'])

    # Concatenar a linha de soma ao DataFrame original
    carteira_tab = pd.concat([carteira_tab, sum_row])

    # Definir o nome do √≠ndice como "Fase"
    carteira_tab.index.name = 'Fase'

    # Duplicar tabela para transformar a nova tab em string
    carteira_tab_str = carteira_tab.copy()

    # Formatar valores das colunas
    carteira_tab_str['N√∫mero de Opera√ß√µes'] = carteira_tab_str['N√∫mero de Opera√ß√µes'].apply(
        lambda x: brazil_vlr(x, 0)
    )

    # Formatar valores das colunas
    carteira_tab_str['Valor de Empr√©stimo'] = carteira_tab_str['Valor de Empr√©stimo'].apply(
        lambda x: brazil_vlr(x / subtractM, decimais_vlr)
    )

    carteira_tab_str['Valor de Contrapartida'] = carteira_tab_str['Valor de Contrapartida'].apply(
        lambda x: brazil_vlr(x / subtractM, decimais_vlr)
    )

    carteira_tab_str['Empr√©stimo / Total (%)'] = carteira_tab_str['Empr√©stimo / Total (%)'].apply(
        lambda x: brazil_per(x * 100, decimais_per)
    )

    # Ordenar as fases pelo valor de 'Valor de Empr√©stimo' em ordem decrescente
    carteira_tab_sorted = carteira_tab.drop(index="Total", errors="ignore")
    carteira_tab_sorted = carteira_tab_sorted.sort_values(by='Valor de Empr√©stimo', ascending=False)

    lista_carteira = []
    for i in range(len(carteira_tab_sorted)):
        percentual = brazil_per((carteira_tab_sorted.iloc[i]['Valor de Empr√©stimo'] / carteira_tab_sorted['Valor de Empr√©stimo'].sum()) * 100, decimais_per)
        if i == 0:
            lista_carteira.append(f"Deste total financeiro, {percentual} est√° associado a projetos na fase '{carteira_tab_sorted.index[i]}'; ")
        elif i == len(carteira_tab_sorted) - 1:
            lista_carteira.append(f"e os {percentual} restantes a projetos na fase '{carteira_tab_sorted.index[i]}', conforme detalhado na tabela apresentada a seguir.")
        else:
            lista_carteira.append(f"{percentual} a projetos na fase '{carteira_tab_sorted.index[i]}'; ")

    # Une todos os elementos da lista_carteira em uma √∫nica string e imprime
    lista_carteira_join = ''.join(lista_carteira)

    return (
        f"A carteira ativa da Cofiex compreende, atualmente, um total de {brazil_vlr(carteira_tab.loc[carteira_tab.index != 'Total', 'N√∫mero de Opera√ß√µes'].sum(), 0)} opera√ß√µes de cr√©dito externo, "
        f"cujo montante financeiro agregado alcan√ßa a expressiva soma de US$ {brazil_vlr(carteira_tab.loc[carteira_tab.index != 'Total', 'Valor de Empr√©stimo'].sum() / subtractB, decimais_vlr)} {('bilh√µes' if (carteira_tab.loc[carteira_tab.index != 'Total','Valor de Empr√©stimo'].sum() / subtractB)>=2 else 'bilh√£o')}. "
        + lista_carteira_join,
        carteira_tab_str
    )

# def style_dataframe(df, alignments: dict) -> str:
#     """
#     Aplica estilos de alinhamento em colunas espec√≠ficas do DataFrame.

#     Par√¢metros:
#       - df: DataFrame do pandas.
#       - alignments: dicion√°rio onde a chave √© o nome da coluna e o valor √© a string
#         de alinhamento ('left', 'center' ou 'right').

#     Retorna:
#       - HTML com o DataFrame estilizado.
#     """
#     styled = df.style
#     for coluna, alinhamento in alignments.items():
#         styled = styled.set_properties(subset=[coluna], **{'text-align': alinhamento})
#     return styled.to_html()

# # Define os alinhamentos desejados para cada coluna
# alinhamentos = {
#     'N√∫mero de Opera√ß√µes': 'center',  # Centraliza a coluna 1
#     'Valor de Empr√©stimo': 'right',   # Alinha √† direita a coluna 2
#     'Valor de Contrapartida': 'right'    # Alinha √† direita a coluna 3
# }




def carteira(filtered_df, distinct_df):
    st.header("Carteira Ativa de Projetos e Programas", divider='gray')

    if 'TEXT_CARTEIRA_ATIVA' in locals():
        pass  # Ou outra a√ß√£o
    else:
        TEXT_CARTEIRA_ATIVA, CA_TAB = carteira_ativa_tab(filtered_df, distinct_df)


    
    
    with st.container():
        
        st.write(
            f"""
            <div style="text-align: justify;">
                {TEXT_CARTEIRA_ATIVA}
            </div>
            """,
            unsafe_allow_html=True
        )
        st.write("")  # Linhas em branco para espa√ßamento
        st.write("")
        st.write("")
        st.write("")
        # tab1, tab2 = st.tabs(["üìà Gr√°fico", "üóÉ Tabela"])



# <p style="margin-bottom: -5px;">
        col1, col2, col3 = st.columns([0.3, 0.4, 0.3])


        with col2:
            st.markdown(
                '<strong>Tabela</strong> - Distribui√ß√£o da Carteira Ativa de acordo com a fase de andamento das opera√ß√µes</p>',
                unsafe_allow_html=True
            )

            st.markdown(
                '<p style="margin-top: -20px;"><strong>Dados em:</strong> unidade e US$ milh√µes</p>',
                unsafe_allow_html=True
            )
            st.markdown(
                '<p style="margin-top: -20px;"><strong>Fonte:</strong> SUFIN/SEAID/MPO</p>',
                unsafe_allow_html=True
            )


            

            # Exibe o DataFrame estilizado no Streamlit
            # st.markdown(style_dataframe(CA_TAB, alinhamentos), unsafe_allow_html=True)
            st.dataframe(CA_TAB)
            # Adicionar uma nota colada na tabela e com fonte menor
            st.markdown(
                '<p style="font-size: 12px; color: gray; margin-top: -20px;">'
                'Nota: Um programa ou projeto pode contemplar mais de uma opera√ß√£o de cr√©dito externo.</p>',
                unsafe_allow_html=True
            )
            